import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import * as os from 'os';
import { CreaturesParser } from './parser';
import * as fs from 'fs/promises';
import * as path from 'path';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = async () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 422,
    width: 585,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  const startLoading = () => {
    mainWindow.setTitle('Loading and parsing spreadsheet');
    mainWindow.setProgressBar(2, { mode: 'indeterminate' });
    mainWindow.setOpacity(0.8);
    mainWindow.setIgnoreMouseEvents(true);
  };

  const endLoading = () => {
    mainWindow.setTitle('GaymDesigner Parser');
    mainWindow.setProgressBar(-1);
    mainWindow.setOpacity(1);
    mainWindow.setIgnoreMouseEvents(false);
  };

  const parseInputData = async (
    spreadsheetLink: string,
    apiKey: string,
    sheetName?: string,
  ) => {
    let spreadsheetId = spreadsheetLink.split('spreadsheets/d/')[1];

    if (spreadsheetId.includes('/')) {
      spreadsheetId = spreadsheetId.split('/')[0];
    }

    const parser = new CreaturesParser(spreadsheetId, apiKey);

    await parser.loadSpreadsheet(sheetName);

    return parser;
  };

  const saveFile = async (xml: string) => {
    const file = await dialog.showSaveDialog({
      title: 'Select path to save file',
      buttonLabel: 'Save',
      defaultPath: path.join(__dirname, 'creatures.xml'),
      filters: [
        {
          name: 'XML Files',
          extensions: ['xml'],
        },
      ],
    });

    endLoading();

    if (file.canceled) return;

    await fs.writeFile(file.filePath.toString(), xml);

    await dialog.showMessageBox({
      title: 'Success',
      message: 'File was saved successfully',
    });
  };

  ipcMain.handle('parseAutomatic', async (event, ...args: string[]) => {
    try {
      startLoading();

      const [spreadsheetLink, apiKey, sheetName] = args;

      const parser = await parseInputData(spreadsheetLink, apiKey, sheetName);

      const xml = parser.autoParse();

      await saveFile(xml);
    } catch (e) {
      await dialog.showErrorBox('Something went wrong', e.message);
    }
  });

  ipcMain.handle('parseManual', async (event, ...args: string[]) => {
    try {
      startLoading();

      const [spreadsheetLink, apiKey, sheetName, rowsToParse] = args;

      const parser = await parseInputData(spreadsheetLink, apiKey, sheetName);

      const rowsToPick = rowsToParse.split('-').map((row) => parseInt(row));

      const xml = parser.manualParse(rowsToPick);

      await saveFile(xml);
    } catch (e) {
      await dialog.showErrorBox('Something went wrong', e.message);
    }
  });

  // and load the index.html of the app.
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (os.platform() !== 'darwin') {
    app.quit();
  }
});

app.on('activate', async () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    await createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
